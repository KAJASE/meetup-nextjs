{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/karenine/Desktop/06-onwards-to-a-bigger-project-starting-project/pages/[meetupId]/index.js\";\nimport { MongoClient, ObjectId } from \"mongodb\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\n\nfunction MeetupDetails() {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    image: props.meetupData.image,\n    title: props.meetupData.title,\n    address: props.meetupData.address,\n    description: props.meetupData.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 9\n  }, this);\n}\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect('mongodb+srv://admin-karen:test123@cluster0.pdmmvak.mongodb.net/?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId;\n  const client = await MongoClient.connect('mongodb+srv://admin-karen:test123@cluster0.pdmmvak.mongodb.net/?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: new ObjectId(meetupId)\n  });\n  client.close();\n  return {\n    props: {\n      meetupData: {\n        id: selectedMeetup._id.toString(),\n        title: selectedMeetup.title,\n        address: selectedMeetup.address,\n        image: selectedMeetup.image,\n        description: selectedMeetup.description\n      }\n    }\n  };\n}\nexport default MeetupDetails;","map":{"version":3,"sources":["/home/karenine/Desktop/06-onwards-to-a-bigger-project-starting-project/pages/[meetupId]/index.js"],"names":["MongoClient","ObjectId","MeetupDetail","MeetupDetails","props","meetupData","image","title","address","description","getStaticPaths","client","connect","db","meetupsCollection","collection","meetups","find","_id","toArray","close","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","selectedMeetup","findOne","id"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,SAAtC;AAEA,OAAOC,YAAP,MAAyB,uCAAzB;;AAGA,SAASC,aAAT,GAAwB;AACpB,sBACI,QAAC,YAAD;AAAc,IAAA,KAAK,EAAGC,KAAK,CAACC,UAAN,CAAiBC,KAAvC;AACA,IAAA,KAAK,EAAEF,KAAK,CAACC,UAAN,CAAiBE,KADxB;AAEA,IAAA,OAAO,EAAEH,KAAK,CAACC,UAAN,CAAiBG,OAF1B;AAGA,IAAA,WAAW,EAAEJ,KAAK,CAACC,UAAN,CAAiBI;AAH9B;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH;;AAED,OAAO,eAAeC,cAAf,GAA+B;AAElC,QAAMC,MAAM,GAAG,MAAMX,WAAW,CAACY,OAAZ,CAAoB,6FAApB,CAArB;AAEA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMC,OAAO,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA2B;AAACC,IAAAA,GAAG,EAAC;AAAL,GAA3B,EAAoCC,OAApC,EAAtB;AAEAR,EAAAA,MAAM,CAACS,KAAP;AAEA,SAAO;AACHC,IAAAA,QAAQ,EAAE,KADP;AAEHC,IAAAA,KAAK,EAAEN,OAAO,CAACO,GAAR,CAAaC,MAAD,KAAa;AAC5BC,MAAAA,MAAM,EAAE;AAACC,QAAAA,QAAQ,EAAEF,MAAM,CAACN,GAAP,CAAWS,QAAX;AAAX;AADoB,KAAb,CAAZ;AAFJ,GAAP;AAMH;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAsC;AAEzC,QAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC;AAEA,QAAMf,MAAM,GAAG,MAAMX,WAAW,CAACY,OAAZ,CAAoB,6FAApB,CAArB;AAEA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMe,cAAc,GAAG,MAAMhB,iBAAiB,CAACiB,OAAlB,CAA0B;AAAEb,IAAAA,GAAG,EAAE,IAAIjB,QAAJ,CAAayB,QAAb;AAAP,GAA1B,CAA7B;AAEAf,EAAAA,MAAM,CAACS,KAAP;AAGA,SAAO;AACHhB,IAAAA,KAAK,EAAE;AACHC,MAAAA,UAAU,EAAE;AACR2B,QAAAA,EAAE,EAAEF,cAAc,CAACZ,GAAf,CAAmBS,QAAnB,EADI;AAERpB,QAAAA,KAAK,EAAEuB,cAAc,CAACvB,KAFd;AAGRC,QAAAA,OAAO,EAAEsB,cAAc,CAACtB,OAHhB;AAIRF,QAAAA,KAAK,EAAEwB,cAAc,CAACxB,KAJd;AAKRG,QAAAA,WAAW,EAAEqB,cAAc,CAACrB;AALpB;AADT;AADJ,GAAP;AAWF;AAEF,eAAeN,aAAf","sourcesContent":["import { MongoClient, ObjectId } from \"mongodb\";\n\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\n\n\nfunction MeetupDetails(){\n    return (\n        <MeetupDetail image= {props.meetupData.image}\n        title={props.meetupData.title}\n        address={props.meetupData.address} \n        description={props.meetupData.description}\n        />\n        \n    );\n}\n\nexport async function getStaticPaths(){\n\n    const client = await MongoClient.connect('mongodb+srv://admin-karen:test123@cluster0.pdmmvak.mongodb.net/?retryWrites=true&w=majority');\n\n    const db = client.db();\n\n    const meetupsCollection = db.collection('meetups');\n\n    const meetups = await meetupsCollection.find({}, {_id:1}).toArray();\n\n    client.close();\n\n    return {\n        fallback: false,\n        paths: meetups.map((meetup) => ({\n            params: {meetupId: meetup._id.toString()},\n        })),     \n    };\n}\n\nexport async function getStaticProps(context){\n\n    const meetupId = context.params.meetupId;\n\n    const client = await MongoClient.connect('mongodb+srv://admin-karen:test123@cluster0.pdmmvak.mongodb.net/?retryWrites=true&w=majority');\n\n    const db = client.db();\n\n    const meetupsCollection = db.collection('meetups');\n\n    const selectedMeetup = await meetupsCollection.findOne({ _id: new ObjectId(meetupId), });\n\n    client.close();\n\n\n    return {\n        props: {\n            meetupData: {\n                id: selectedMeetup._id.toString(),\n                title: selectedMeetup.title,\n                address: selectedMeetup.address,\n                image: selectedMeetup.image,\n                description: selectedMeetup.description,\n            },\n        },\n    };\n }\n\nexport default MeetupDetails;"]},"metadata":{},"sourceType":"module"}